{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21999.999990127282\n",
      "0.0\n",
      "Excess: 1 dimensions:\n",
      "[1] = 49.9999999999076\n",
      "[2] = 29.999999999820993\n",
      "[3] = 0.0\n"
     ]
    }
   ],
   "source": [
    "using JuMP\n",
    "using Ipopt\n",
    "\n",
    "m = Model(solver=IpoptSolver(print_level=0))\n",
    "S=collect(1:3)\n",
    "D=[20,40,70]\n",
    "P=10*7\n",
    "p=[0.2,0.4,0.2]\n",
    "\n",
    "@variable(m,Cap>=0)\n",
    "@variable(m,Inv[S]>=0)\n",
    "@variable(m,Excess[S]>=0)\n",
    "\n",
    "@constraint(m,[s in S],Inv[s] == P-D[s]-Excess[s])\n",
    "@constraint(m,[s in S],Inv[s] <= Cap)\n",
    "\n",
    "@objective(m,Min,1000*Cap+sum(1000*p[s]*Excess[s] for s in S))\n",
    "\n",
    "solve(m)\n",
    "\n",
    "println(getobjectivevalue(m))\n",
    "println(getvalue(Cap))\n",
    "println(getvalue(Excess))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.6.2",
   "language": "julia",
   "name": "julia-0.6"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
